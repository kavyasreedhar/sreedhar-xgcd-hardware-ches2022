/* *****************************************************************************
 * File: test.v
 * Author: Ofer Shacham
 * 
 * Description:
 * simple test bench for template
 * 
 *
 * Change bar:
 * -----------
 * Date                  Author     Description
 * Apr 3, 2010  shacham  initial version
 * Apr 15, 2020  kongty  added AXI testbench
 *  
 * 
 * ****************************************************************************/

////////////////////////////// IMPORTANT MESSAGE: //////////////////////////////
// Note that programs are written using object oriented programming. They
// are closer to software than to hardware. There is therefore no real need
// in a genesis type parameterization.
////////////////////////////////////////////////////////////////////////////////

// parameter definition
//; my $config_addr_width = parameter(name => 'config_addr_width', val=>2);
//; my $config_data_width = parameter(name => 'config_data_width', val=>2049);
//; my $data_width = parameter(name => 'data_width', val=>1024);

program automatic `mname`(interface dut_ifc, interface jtag_ifc);
    
    // some variables to control the test
    int seed;
    int rnd0;
    int file_desc;
    int config_count=0;
    bit [1023:0] A_inter;
    bit [1023:0] B_inter;
    bit [1023:0] A_inter2;
    bit [1023:0] B_inter2;

    // Instantiate a jtag driver
    //; my $jtag_drvr_obj = generate_base('jtag_driver', 'jtag_driver');
    `$jtag_drvr_obj->instantiate`;

    jtag_regfile_trans_t jtag_trans;
    
    //============================================================================//
    // run_test task
    //============================================================================//
    task run_test; begin
    logic [`$config_addr_width-1`:0] addr;
    logic [`$config_data_width-1`:0] data;

    // read ID
    jtag_driver.ReadID(jtag_trans);
    
    // initialization of structs:
    jtag_trans.domain = sc_domain;
    jtag_trans.addr = `$config_addr_width`'d0;
    jtag_trans.op = nop;
    jtag_trans.data_out = '0;

    B_inter = 1024'd13782397255327787290786650350989564796907599809432880030746564891482444924598429297489885983522283444556253557198022386605051419563896428703785902681835878322341562468214916502027093985474479295132877845616822779202072792596887392212440715640213672651991981810409512161853692432766382094848927674652756342154;
    A_inter = 1024'd9325277049869037044628435066252614529554397464693035251062880893939890257659145840588094853452807811426230663994936575190954009937665243544349460008940567957298106577620715949153312589729336950800338531320598020607718177239074025527541710715763231143104544135750795442686661716695420749956329751826977142405;

    A_inter2 = 1024'd21805942526930591595609112851555602449083005003664016538274659617456563829786070244586802049663832243134042429283968076227308814349791330162572563665005236736609216184631050813760909297634719203786279900860117837879109443153861036883691019845948109223145152095747174112064929926272810549071552363561073334753;
    B_inter2 = 1024'd43724231042719298448889130462108919692178773864370149020870249011858481372868419033800315964303707384439955957372541962107142189880771443814967877688554136473179237623761416522030818940000403904644008579924303432722747732624308958559503759624729380410697186349237084687331297273393896621838688606118795036838;
    // write read delay register
    @(posedge gcd_obj.clk);
    write_reg(A_inter, B_inter);
    //write_reg(8, 7);
    repeat(2) jtag_driver.Next_tck();

    repeat(50) jtag_driver.Next_tck();

    #10000;
    @(posedge gcd_obj.clk);
    read_reg();

    repeat(2) jtag_driver.Next_tck();

    repeat(50) jtag_driver.Next_tck();

    write_reg(A_inter2, B_inter2);
    repeat(2) jtag_driver.Next_tck();
    repeat(50) jtag_driver.Next_tck();

    #10000;
    @(posedge gcd_obj.clk);
    read_reg();

    
    end
    endtask // run_test


    //============================================================================//
    // Control the simulation
    //============================================================================//
    initial begin
        $display("%t:\t********************Loading Arguments***********************",$time);
        init_test;
        file_desc = $fopen("test.log","w");
        
        $display("%t:\t*************************START*****************************",$time);
        @(negedge dut_ifc.Reset);
        repeat (10) @(posedge dut_ifc.Clk);
        run_test;
        repeat (10) @(posedge dut_ifc.Clk);
        $display("%t:\t*************************FINISH****************************",$time);
        $fclose(file_desc);
        $finish(2);
    end
    
    //============================================================================//
    // Tasks
    //============================================================================//
    task write_reg(input bit [`$data_width-1`:0] A, input bit [`$data_width-1`:0] B);
    begin
        jtag_trans.op = write;
        jtag_trans.addr = $urandom_range((2 ** `$config_addr_width`)-1);
        jtag_trans.data_in = {1'b1, A, B};
        jtag_trans.done = 0;
        config_count++;
        jtag_driver.Send(jtag_trans);
        $fdisplay(file_desc,"%t: %m: Trans %d (Write):    Address to GC=%d, Data to GC=%d",  
            $time, config_count, jtag_trans.addr, jtag_trans.data_in);
        @(posedge gcd_obj.clk);
    end
    endtask //write_config
       
    task read_reg();
    begin
        jtag_trans.op = read;
        jtag_trans.addr = $urandom_range((2 ** `$config_addr_width`)-1);
        jtag_trans.data_in = '0;
        jtag_trans.done = 0;
        //dut_ifc.done = $urandom_range((2 ** 1)-1);
        //dut_ifc.bezout_a = $urandom_range((2 ** `$data_width`)-1);
        //dut_ifc.bezout_b = $urandom_range((2 ** `$data_width`)-1);
        jtag_driver.Send(jtag_trans);
        config_count++;
        jtag_trans = jtag_driver.GetResult();
        $fdisplay(file_desc,"%t: %m: Trans %d (Read):  Address to GC=%d, Data to GC=%d, Done from CGRA=%d, b from CGRA=%d, a from CGRA=%d, Data Read=%d",  
            $time, config_count, jtag_trans.addr, jtag_trans.data_in, top.dut.done, top.dut.bezout_b, top.dut.bezout_a, jtag_trans.data_out);
        assert (jtag_trans.data_out == {gcd_obj.done, gcd_obj.bezout_b, gcd_obj.bezout_a});
    end
    endtask //read_config
    

    task init_test();
    begin
        // read user input
        //ProcessArgs();
        rnd0 = $random(seed); // initial the random number generator
        
        // init the environment
        jtag_driver = new(jtag_ifc);
        jtag_driver.Zero();

        repeat (2) @(posedge dut_ifc.Clk); 
    end
    endtask // init_test
 
endprogram : `mname`
    
